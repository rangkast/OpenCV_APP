from Advanced_Function import *
frame_cnt = 15

# 2D 포인트 배열 지정
points2D = np.array([
    [576.70768249, 581.7040481 ],
    [504.72263609, 578.87014871],
    [650.10619452, 570.15952786],
    [463.10860692, 565.70369713],
    [571.69922548, 536.88958046],
    [500.61773961, 530.84227504],
    [654.59750173, 528.59149896],
    [700.32552378, 517.63362971],
    [457.67294478, 514.64425863]
])

# 정규화된 2D 포인트 배열 지정
points2D_U = np.array([
    [-0.10306651,  0.12863426],
    [-0.20281795,  0.12418817],
    [-0.0008731,   0.11283475],
    [-0.26024162,  0.10557942],
    [-0.11023781,  0.06642056],
    [-0.20887857,  0.05762731],
    [ 0.00538984,  0.0550232 ],
    [ 0.06927466,  0.03969615],
    [-0.26817362,  0.03483316]
])

points3D = np.array([
[-0.00538225, -0.03670253, 0.00442442],
[0.00978572, -0.04727607, 0.0040668],
[0.02993561, -0.05133603, 0.00403334],
[0.05145799, -0.0452342, 0.00322126],
[0.06952839, -0.02946931, 0.00289837],
[0.0774895, -0.01309678, 0.00305882],
[0.07833686, 0.00930992, 0.00274091],
[0.07173884, 0.02620113, 0.00300525],
[0.05323637, 0.0446104, 0.00333569],
[0.03440627, 0.05094375, 0.00376592],
[0.01247952, 0.04827114, 0.00409928],
[-0.00525621, 0.03652419, 0.00430552],
[-0.01725874, -0.02510102, 0.0170897],
[-0.00734298, -0.03632259, 0.01707089],
[0.02459884, -0.05074652, 0.01805065],
[0.04446367, -0.04730652, 0.01844551],
[0.06122225, -0.03579857, 0.01883048],
[0.07364986, -0.01468638, 0.01950387],
[0.07176939, 0.02063129, 0.01912847],
[0.0546692, 0.04178583, 0.01877653],
[0.03418668, 0.05023091, 0.01837584],
[0.01247775, 0.0485895, 0.01770159],
[-0.0073319, 0.03636108, 0.01712673],
[-0.01727314, 0.02493721, 0.01696496],
])

points3D_dir = np.array([
[-0.60688004, -0.75584205, -0.24576291],
[-0.33720495, -0.90003042, -0.27611241],
[ 0.11035048, -0.95576858, -0.27263381],
[ 0.51196981, -0.84107304, -0.17459397],
[ 0.83833736, -0.54169635, -0.06128241],
[ 0.96998041, -0.23536262, -0.06117552],
[ 0.98373745,  0.16887833, -0.06116157],
[ 0.87571599,  0.48070836, -0.04517721],
[ 0.54204116,  0.82528168, -0.15843461],
[ 0.19284405,  0.94275266, -0.27208197],
[-0.21963071,  0.92057199, -0.3229699 ],
[-0.60688004,  0.75584205, -0.24576291],
[-0.75344005, -0.64331363,  0.13592523],
[-0.64614776, -0.74783871,  0.152415  ],
[ 0.01024382, -0.93983665,  0.34147055],
[ 0.36842103, -0.8465559 ,  0.38419924],
[ 0.65268227, -0.62648053,  0.42606103],
[ 0.84769881, -0.25119497,  0.46723422],
[0.81854725, 0.35282319, 0.45331689],
[0.5400044 , 0.73368009, 0.41244245],
[0.18586076, 0.90365993, 0.38581669],
[-0.22076738,  0.92403974,  0.31210946],
[-0.64614776,  0.74783871,  0.152415  ],
[-0.80510213,  0.57732451,  0.13604035],    
])

# LED 번호 배열 지정
LED_NUMBER = np.array([10, 9, 11, 8, 21, 20, 22, 23, 19])


# KD-Tree 생성
from scipy.spatial import KDTree
points3D_tree = KDTree(points3D)

# 특정 LED를 기준으로 가까운 이웃 찾기 (예: 첫 번째 LED)
distances, indices = points3D_tree.query(points3D[0], k=4)  # 가장 가까운 4개의 이웃을 찾음

print("가까운 이웃 거리:", distances)
print("가까운 이웃 인덱스:", indices)


X = np.array(brfs)
x = np.hstack((points2D_U, np.ones((points2D_U.shape[0], 1))))
# print('X ', X)
# print('x ', x)
poselib_result = poselib.p3p(x, X)
# print(X)
# print(poselib_result)



show_calibrate_data(np.array(points3D), np.array(points3D_dir))